#+TITLE: Outreach Portal
#+AUTHOR: VLEAD
#+DATE: [2015-10-27 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-0.org
#+options: ^:nil

* Introduction
  Outreach portal keeps track of all the outreach activities done to
  promote Virtual Labs. It also acts as a central place where all the
  documents related to workshops/trainings are stored.

* Requirements
  1. Python API that acts as a wrapper to make CRUD operations on the
     data.
  2. REST API for various applications to perform CRUD operations on
     the data.
  
* Design & Implementation  
** The Data Model
   
*** Name
     
    Name is an alphabetical string.

#+BEGIN_SRC python :tangle src/db.py :eval no
class Name(object):
    def __init__(self, value):
        # if the string contains any non-alphabet and non-space character, raise
        # a type error
        if re.search('[^a-zA-Z. ]+', value):
            raise TypeError('%s is not a Name!' % value)

        self.value = value
#+END_SRC

*** Email

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle src/db.py :eval no
class Email(object):
    def __init__(self, value):
        if not re.search('[^@]+@[^@]+\.[^@]+', value):
            raise TypeError('%s is not an email!' % value)
        self.value = value
#+END_SRC

*** Outreach Coordinator
**** Immutable data
     + Id
     + Created

**** Mutable data
     + Name
     + Email
     + Last Active

**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class OutreachCoordinator(Entity):

    __tablename__ = 'outreach_coordinators'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    email = db.Column(db.String(128), unique=True)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    last_active = db.Column(db.DateTime, default=datetime.utcnow)

    nodal_coordinators = db.relationship('NodalCoordinator', backref='outreach_coordinator')

#+END_SRC

**** Constructor
     Signature of the constructor is as follows. Attributes inside [...]  are
     optional. Others are mandatory.
      
#+BEGIN_EXAMPLE
    outreach_coordinator = OutreachCoordinator(name=<instance of class Name>,
                                               email=<instance of Email>,
                                               created=Timestamp,
                                               last_active=Timestamp)
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'email' not in kwargs:
            raise AttributeRequired("mandatory attribute `email` is missing")
        self.set_email(kwargs['email'])

        if 'created' not in kwargs:
            raise AttributeRequired("mandatory attribute `created` is missing")

        if not isinstance(kwargs['created'], time):
            raise TypeError("created should be of type time")
        self.created = kwargs['created']
     
        if 'last_active' not in kwargs:
            raise AttributeRequired("mandatory attribute `last_active` is missing")
        self.set_last_active(kwargs['last_active'])

#+END_SRC

**** Functions that operate on the Outreach Coordinator domain 
***** getName: OutreachCoordinator --> Name
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC
   
***** getEmail: OutreachCoordinator --> Email
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_email(self):
        return self.email
#+END_SRC
***** setName: OutreachCoordinator, Name --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name.value
#+END_SRC

***** setEmail: OutreachCoordinator, Email --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(email=Email)
    def set_email(self, email):
        self.email = email.value
#+END_SRC

***** setLastActive: OutreachCoordinator, Email --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(=)
    def set_last_active(self, ):

#+END_SRC
      
*** Nodal Coordinator
**** Immutable data
     + Id
     + Created

**** Mutable data     
     + Name
     + Email
     + Created By
     + Target Workshops
     + Target Participants
     + Target Experiments
     + Current Workshops
     + Current Participants
     + Current Experiments
     + Last Active

**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class NodalCoordinator(Entity):

    __tablename__ = 'nodal_coordinators'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    email = db.Column(db.String(128), unique=True)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    last_active = db.Column(db.DateTime, default=datetime.utcnow)
    created_by =  db.Column(db.Integer, db.ForeignKey('outreach_coordinators.id'))
    target_workshop = db.Column(db.Integer)
    target_participants = db.Column(db.Integer)
    target_experiments = db.Column(db.Integer)
    current_workshops = db.Column(db.Integer)
    current_participants = db.Column(db.Integer)
    current_experiments = db.Column(db.Integer)

    nodal_centres = db.relationship('NodalCentre', backref='nodal_coordinator')
    coordinator_trainings = db.relationship('NodalCoordinatorsTraining', backref='nodal_coordinator')

#+END_SRC

**** Constructor

#+BEGIN_EXAMPLE
    nodal_coordinator = NodalCoordinator(name=<instance of class Name>,
                                         email=<instance of Email>,
                                         created=Timestamp,
                                         created_by=<instance of OutreachCoordinator class>,
                                         target_workshops=Integer,
                                         target_participants=Integer,
                                         target_experiments=Integer,
                                         current_workshops=Integer,
                                         current_participants=Integer,
                                         current_experiments=Integer,
                                         last_active=Timestamp)
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'email' not in kwargs:
            raise AttributeRequired("mandatory attribute `email` is missing")
        self.set_email(kwargs['email'])

        if 'created' not in kwargs:
            raise AttributeRequired("mandatory attribute `creation time` is missing")

        if not isinstance(kwargs['created'], time):
            raise TypeError("created should be of type time")
        self.created = kwargs['created']

        if 'created_by' not in kwargs:
            raise AttributeRequired("mandatory attribute `created_by` is missing")
        self.set_created_by(kwargs['created_by'])

        if 'target_workshops' not in kwargs:
            raise AttributeRequired("mandatory attribute `target_workshops` is missing")
        self.set_target_workshops(kwargs['target_workshops'])

        if 'target_participants' not in kwargs:
            raise AttributeRequired("mandatory attribute `target_participants` is missing")
        self.set_target_participants(kwargs['target_participants'])

        if 'target_experiments' not in kwargs:
            raise AttributeRequired("mandatory attribute `target_experiments' is missing")
        self.set_target_experiments(kwargs['target_experiments'])

        if 'current_workshops' not in kwargs:
            raise AttributeRequired("mandatory attribute `current_workshops` is missing")
        self.set_current_workshops(kwargs['current_workshops'])

        if 'current_participants' not in kwargs:
            raise AttributeRequired("mandatory attribute `current_participants` is missing")
        self.set_current_participants(kwargs['current_participants'])

        if 'current_experiments' not in kwargs:
            raise AttributeRequired("mandatory attribute `current_experiments` is missing")
        self.set_current_experiments(kwargs['current_experiments'])

        if 'last_active' in kwargs:
            self.set_last_active(kwargs['last_active'])

#+END_SRC

**** Functions that operate on the Nodal Coordinator domain
***** getName: NodalCoordinator --> Name
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name

#+END_SRC

***** getEmail: NodalCoordinator --> Email
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_email(self):
        return self.email
#+END_SRC

***** getCreatedBy: NodalCoordinator --> OutreachCoordinator
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_created_by(self):
        return self.created_by
#+END_SRC

***** getTargetWorkshops: NodalCoordinator --> Integer
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_target_workshops(self):
        return self.target_workshops
#+END_SRC

***** getTargetParticipants: NodalCoordinator --> Integer
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_target_participants(self):
        return self.target_participants
#+END_SRC

***** getTargetExperiments: NodalCoordinator --> Integer
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_target_experiments(self):
        return self.target_experiments
#+END_SRC

***** getCurrentWorkshops: NodalCoordinator --> Integer
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_current_workshops(self):
        return self.current_workshops
#+END_SRC

***** getCurrentParticipants: NodalCoordinator --> Integer

#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_current_participants(self):
        return self.current_participants
#+END_SRC

***** getCurrentExperiments: NodalCoordinator --> Integer
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_current_experiments(self):
        return self.current_experiments
#+END_SRC

***** setName: NodalCoordinator, Name --> Void 
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name
#+END_SRC

***** setEmail: NodalCoordinator, Email --> Void 
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(email=Email)
    def set_email(self, email):
        self.email = email.value
#+END_SRC

***** setCreatedBy: NodalCoordinator, OutreachCoordinator --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(created_by=OutreachCoordinator)
    def set_created_by(self, created_by):
        self.created_by = created_by
#+END_SRC

***** setTargetWorkshops: NodalCoordinator, Integer --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(target_workshops=int)
    def set_target_workshops(self, target_workshops):
        self.target_workshops = target_workshops
#+END_SRC

***** setTargetParticipants: NodalCoordinator, Integer --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(target_participants=int)
    def set_target_participants(self, target_participants):
        self.target_participants = target_participants
#+END_SRC

***** setTargetExperiments: NodalCoordinator, Integer --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(target_experiments=int)
    def set_target_experiments(self, target_experiments):
        self.target_experiments = target_experiments
#+END_SRC

***** setCurrentWorkshops: NodalCoordinator, Integer --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(current_workshops=int)
    def set_current_workshops(self, current_workshops):
        self.current_workshops = current_workshops
#+END_SRC

***** setCurrentParticipants: NodalCoordinator, Integer --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(current_participants=int)
    def set_current_participants(self, current_participants):
        self.current_participants = current_participants
#+END_SRC

***** setCurrentExperiments: NodalCoordinator, Integer --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(current_experiments=int)
    def set_current_experiments(self, current_experiments):
        self.current_experiments = current_experiments
#+END_SRC

*** Nodal Centre
**** Immutable data
     + Id

**** Mutable data
     + Name
     + Location
     + Coordinator 
   
**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class NodalCentre(Entity):

    __tablename__ = 'nodal_centres'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    location = db.Column(db.String(128), nullable=False)

    coordinator =  db.Column(db.Integer, db.ForeignKey('nodal_coordinators.id'))
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    nodal_centre = NodalCentre(name=<instance of class Name>,
                               location=str,
                               coordinator=<instance of NodalCoordinator class>)
                                            
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'location' not in kwargs:
            raise AttributeRequired("mandatory attribute `location` is missing")
        self.set_location(kwargs['location'])

        if 'coordinator' not in kwargs:
            raise AttributeRequired("mandatory attribute `coordinator` is missing")
        self.set_coordinator(kwargs['coordinator'])

#+END_SRC

**** Functions that operate on the Nodal Centre domain
***** getName: NodalCentre --> Name
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

***** getLocation: NodalCentre --> String
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_location(self):
        return self.location
#+END_SRC

***** getCoordinator: NodalCentre --> NodalCoordinator
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_coordinator(self):
        return self.coordinator
#+END_SRC

***** setName: NodalCentre, Name --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name
#+END_SRC

***** setLocation: NodalCentre, String --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(location=str)
    def set_location(self, location):
        self.location = location
#+END_SRC

***** setCoordinator: NodalCentre, NodalCoordinator --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(coordinator=NodalCoordinator)
    def set_coordinator(self, coordinator):
        self.coordinator = coordinator
#+END_SRC
 
*** Nodal Coordinators Training
**** Immutable data
     + Id

**** Mutable data
     + Name
     + Date
     + Location
     + Duration
     + Description
     + Invitees
     + Created By

**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class NodalCoordinatorsTraining(Entity):

    __tablename__ = 'nodal_coordinators_training'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    location = db.Column(db.String(128))
    date = db.Column(db.DateTime, default=datetime.utcnow) 
    duration = db.Column(db.Integer)
    description = db.Column(db.String(128))
    invitees = db.Column(db.String(128))

    created_by = db.Column(db.Integer, db.ForeignKey('nodal_coordinators.id'))
#+END_SRC

**** Constructor

**** Functions that operate on the Nodal Coordinators Training domain
    
*** Workshop
**** Immutable data
     + Created
     + Last Updated

**** Mutable data
     + Location
     + Conducted By
     + Name
     + Date
     + Institutes
     + No of Participants
     + No Of Sessions
     + Duration Of Sessions
     + Discipline
     + Labs Planned
     + Other Details
     + Status

**** Definition
**** Constructor
**** Functions that operate on the Workshop domain

*** Workshop Document
**** Immutable data
     + Id

**** Mutable data
     + Name
     + Path

**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class WorkshopDocument(Entity):

    __tablename__ = 'workshop_documents'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    path = db.Column(db.String(128), nullable=False)

#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    workshop_document = WorkshopDocument(name=<instance of class Name>,
                                         path=str)
                                            
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'path' not in kwargs:
            raise AttributeRequired("mandatory attribute `path` is missing")
        self.set_path(kwargs['path'])

#+END_SRC

**** Functions that operate on the Workshop Document domain
***** getName: WorkshopDocument --> Name
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

***** getPath: WorkshopDocument --> String
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_path(self):
        return self.path
#+END_SRC

***** setName: WorkshopDocument, Name --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name
#+END_SRC

***** setPath: WorkshopDocument, String --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(path=str)
    def set_path(self, path):
        self.path = path
#+END_SRC
     
*** Workshop Report
**** Immutable data
     + Created
     + Last Updated

**** Mutable data
     + Workshop Id
     + Attendance Sheet
     + College Report
     + Participants Attended
     + Experiments Conducted
     + Status
     + Positive Comments
     + Negative Comments

**** Definition

**** Constructor

**** Functions that operate on the Workshop Report domain
 
*** Workshop Photo
**** Immutable data
     None of the data is immutable.

**** Mutable data
     + Path
     + Workshop Report Id

**** Definition

**** Constructor

**** Functions that operate on the Workshop Photo domain


** Model Diagram
    The model-diagram can be found below. This gives an overview of the
    relationships between different entities.

    [[https://github.com/vlead/outreach-portal/blob/master/outreach-model-diagram.jpg][Model-diagram]] 

    This diagram highlights the following facts:

    + An outreach coordinator can have multiple nodal coordinators
      associated with it.

    + An outreach coordinator can conduct multiple nodal coordinator
      trainings.

    + Each nodal centre is assigned to a unique nodal coordinator.
  
    + A nodal coordinator can conduct multiple workshops.

    + A workshop report is unique to a workshop and there can not be
      multiple reports for a single workshop.

    + Each workshop report can have multiple workshop photos.

    + The workshop document is a separate entity and is only used by an
      admin.

** REST APIs

* Operations of the application
  + The outreach coordinators would broadly do the following operations
    through this portal:

    - Add Nodal Centres.
    - Assign new or existing nodal coordinators to nodal centres.
    - Set targets for nodal coordinators.
    - Approve/reject workshop reports and comment on them.
    - Add a nodal coordinator training workshop

  + The nodal coordinators would perform the following operations:

    - Create/edit/delete workshop.
    - Submit/edit workshop report.

  + Besides these users, an admin is part of the system and the
    application assumes who the admin is. He can upload the relevant
    workshop documents and add outreach coordinators. 

* Link to wireframes 
  A skeletal of the front-end is given below in different use-case
  scenarios:

  [[https://github.com/Virtual-Labs/outreach-portal/blob/master/vlead-effort/wireframes/Vlabs%20Outreach%20Portal%20design-%20Wireframes.pdf][Wireframes]]

* Quality Parameters
  Following standard practices need to be strictly observed:

  + Issue tracking should be done via Github portal.
  + The function and variable names should be relevant along with
    proper casing.(Camel case or upper case)
  + Complete code should be properly indented.
  + There should be relevant comments in the code.
  + The database tables should be normalized.
  + The application should be properly secured from common web attacks
    such as SQL injection.
  + The directory structure of the different folders should be proper
    and the documents should be checked in relevant folders only.
