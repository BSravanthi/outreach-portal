#+TITLE: Setup Outreach
#+Author: VLEAD
#+Date: [2015-08-25 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org

* Introduction
This will install all the dependencies required for setting up the
outreach portal 2.0.

* Install dependendent python packages
Here we use the =setuptools= module from the standard lib, to make a
=setup.py= file, which will install all the python library dependencies.

#+BEGIN_SRC python :tangle setup.py :eval no
from setuptools import setup

requires = [
    'flask',
    'Flask-SQLAlchemy',
    'oursql',
    'flask-cors',
    'flask-testing',
    'requests'
]

setup(
    name='Outreach',
    version='2.0',
    install_requires=requires
)

#+END_SRC

* Program to set up the database
  #+BEGIN_SRC python :tangle db_setup.py :eval no
from src.app import create_app
from src.db import *
import src.config as config


def create_roles():
    role1 = Role(name=Name("admin"))
    role1.save()

    role2 = Role(name=Name("OC"))
    role2.save()

    role3 = Role(name=Name("NC"))
    role3.save()

    user = User(name=Name("admin"), email=Email("outreach-admin@vlabs.ac.in"), role = role1)
    user.save()

def create_status():
    status1 = Status(name=Name("Upcoming"))
    status1.save()

    status2 = Status(name=Name("Pending for Approval"))
    status2.save()

    status3 = Status(name=Name("Approved"))
    status3.save()

    status4 = Status(name=Name("Rejected"))
    status4.save()

    status5 = Status(name=Name("Pending for Upload"))
    status5.save()

    status6 = Status(name=Name("Cancel"))
    status6.save()


if __name__ == "__main__":
    db.create_all(app=create_app(config))
    create_roles()
    create_status()


  #+END_SRC
* Program to migrate the data from old database to new database of outreach portal
#+BEGIN_SRC python :tangle migrate_old_to_new_data.py :eval no

#!/usr/bin/python
import MySQLdb
import sys
from src.app import create_app
from src.db import *
import src.config as config


def populate_users():
    print "Populating users table.."
    cursor1.execute("select * from va_users")
    data = cursor1.fetchall()

    for row in data:
        if row[1]=="Prof. (Dr.) K. Kamal":
            name = Name("Prof.Dr.K. Kamal")
        else:
            name = Name(row[1].strip())
        email = Email(row[2].strip())
        if row[5] == 1:
            role=Role.get_by_id(2)
        elif row[5] == 2:
            role=Role.get_by_id(3)
        else:
            role = None
        new_user = User(name=name, email=email, role=role)
       # print new_user.name, new_user.email
        new_user.save()

def populate_workshops():
    print "Populating workshops table.."
    cursor1.execute("select * from workshop")
    data = cursor1.fetchall()

    for row in data:
        name = row[1].strip()
        location = row[2].strip()
        user = User.get_by_id(row[12]+1)
        participating_institutes = row[3].strip()
        status = Status.get_by_id(4)
        labs_planned = len(row[9].split(","))

        if row[4] == '' or row[5] == '' or row[6] == '' or row[9] == '':
            pass
        else:
            no_of_participants_expected = int(row[5])
            no_of_sessions = int(row[6])
            date = str(row[4])

        new_workshop = Workshop(name=name, location=location, user=user,
                                participating_institutes=participating_institutes,
                                no_of_participants_expected=no_of_participants_expected,
                                no_of_sessions=no_of_sessions, labs_planned=labs_planned,
                                status=status, date=date)

        new_workshop.save()

def populate_nodal_centres():
    print "Populating nodal centres table.."
    cursor1.execute("select * from va_users")
    data = cursor1.fetchall()

    for row in data:
        name=''
        location=''
        if row[6]==None:
            pass
        else:
            name_location = row[6].split(",")
            if len(name_location)==1:
                pass
            else:
                name=name_location[0].strip()
                location=name_location[1].strip()
                user = User.query.filter_by(name=row[1]).first()
                if user==None:
                    pass
                else:
                    new_centre = NodalCentre(name=name, location=location, created_by=user)
                    print new_centre.name, new_centre.location, new_centre.created_by.name
                    new_centre.save()

def populate_nodal_coordinator_details():
    print "Populating nodal coordinator details table.."
    cursor1.execute("select * from nodalcoordinatortraining")
    data = cursor1.fetchall()

    for row in data:

        role1= Role.get_by_id(2)
        role2=Role.get_by_id(3)

        user1 = User(name=Name("dummyuseroc"), email=Email("dummyuseroc@vlabs.ac.in"), role = role1 )
        user1.save()

        user2 = User(name=Name("dummyusernc"), email=Email("dummyusernc@vlabs.ac.in"), role = role2)
        user2.save()

        target_workshops = 0

        nodal_centre=NodalCentre.get_by_id(1)
        target_participants=row[1]
        target_experiments=row[2]

        nodal_coordinator_detail = NodalCoordinatorDetail(user=user2,
                                                          target_workshops=target_workshops,
                                                          created_by=user1,
                                                          nodal_centre=nodal_centre,
                                                          target_participants=target_participants,
                                                          target_experiments=target_experiments)
        print nodal_coordinator_detail.user.name, nodal_coordinator_detail.target_workshops,
        print nodal_coordinator_detail.created_by.name, nodal_coordinator_detail.nodal_centre.name,
        print nodal_coordinator_detail.target_participants, nodal_coordinator_detail.target_experiments
        nodal_coordinator_detail.save()

def populate_workshop_reports():
    print "Populating workshop reports table.."
    cursor1.execute("select * from workshop_metirial_documents")
    data = cursor1.fetchall()

    for row in data:
        user= User.query.filter_by(name="dummyuseroc").first()
        status =  Status.query.filter_by(name="Approved").first()

        workshop1 = Workshop(name="dummyworkshop", location="IIIT-Hyd",
                             user=user, participating_institutes="HCU,\
                             IIIT-Hyd", no_of_participants_expected=100,
                             no_of_sessions=3, labs_planned=4,
                             status=status, date="Mon Nov 23 2015 06:18:26\
                             GMT-0500 (EST)")
        name = row[1][:128].strip()
        path = row[2].strip()

        new_workshop_report = WorkshopReport(name=name, workshop=workshop1,
                                             path=path)

        new_workshop_report.save()

def populate_reference_documents():
    print "Populating reference documents table.."
    cursor1.execute("select * from workshop_metirial_documents")
    data = cursor1.fetchall()

    for row in data:
        user= User.query.filter_by(name="dummyuseroc").first()

        if row[1]=='doc123':
            name=Name('doc')
        elif '-'  in row[1]:
            row[1].replace("-","")
        elif '&' in row[1]:
            row[1].replace("&","")
        elif ';' in row[1]:
            row[1].replace(";","")
        elif '/' in row[1]:
            row[1].replace("/","")
        elif '/' in row[1]:
            row[1].replace("/","")
        else:
            name = Name(row[1][:128].strip())
        path = row[2].strip()
        new_reference_document = ReferenceDocument(name=name, user=user,
                                                    path=path)

        new_reference_document.save()

if __name__ == "__main__":
    connection1 = MySQLdb.connect(host = "localhost", user = "root",
                                  passwd = "root", db = "old_outreach")
    cursor1 = connection1.cursor()

    connection2 = MySQLdb.connect(host = "localhost", user = "root",
                                  passwd = "root", db = "outreach")
    cursor2 = connection2.cursor()

    db.create_all(app=create_app(config))
    populate_users()
    populate_workshops()
    populate_nodal_centres()
    populate_nodal_coordinator_details()
    populate_workshop_reports()
    populate_reference_documents()


    cursor1.close()
    connection1.close()

    cursor2.close()
    connection2.close()

    sys.exit()
#+END_SRC

* Install all dependencies and setup the software
Install all dependencies, including the OS related packages, Python packages,
setup the database, configure the webserver, and finally deploy the
application.

#+BEGIN_SRC sh :tangle setup.sh :eval no
#!/bin/bash
# Shell script to install deb package dependencies as well as python package
# dependencies for dataservice.

# if any proxy server
#PROXY=""
# file to store the generated password
DB_PASS_FILE="db_pass.txt"

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

# Update the packages
echo "Updating package cache.."
apt-get -y update
if [[ $? -ne 0 ]]; then
  echo "Updating package cache failed!"
  exit 1;
fi

echo "Installing MySQL database.."
if [ ! -f $DB_PASS_FILE ]; then
  # generate a random password for the database and store it in the $DB_PASS_FILE
  # file
#  DBPASS=$(date +%s | sha256sum | head -c 32)
  DBPASS="root"
  echo $DBPASS > $DB_PASS_FILE
fi

# Install MySQL Server in a Non-Interactive mode.
echo "mysql-server mysql-server/root_password password $DBPASS" | sudo debconf-set-selections
echo "mysql-server mysql-server/root_password_again password $DBPASS" | sudo debconf-set-selections
apt-get install -y mysql-server
if [[ $? -ne 0 ]]; then
  echo "FATAL: MySQL installation failed!"
  exit 1;
fi

# Install pre-requsite dependencies: python-dev, mysqld-dev, setuptools,
# apache, mod_wsgi etc.
echo "Installing pre-requisite dependencies.."
apt-get install -y python-dev libmysqld-dev python-setuptools apache2 libapache2-mod-wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installing pre-requisite dependencies failed!"
  exit 1;
fi

echo "Enabling the mod WSGI on apache"
a2enmod wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Unable to enable mod wsgi!"
  exit 1;
fi

# Installing python dependencies
echo "Installing dependencies.."
#export http_proxy=$PROXY
#export https_proxy=$PROXY
#python setup.py install
pip install Flask Flask-SQLAlchemy oursql requests flask-cors flask-testing
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installation failed!"
  exit 1;
fi

exit 0

#+END_SRC

* Configuring the application and its deployment
  The following program configures the application, configures the web server
  to use WSGI and use the application scripts, and finally calls the database
  setup scripts to actually setup the database with tables.
#+BEGIN_SRC sh :tangle configure.sh :eval no
#!/bin/bash
# Configure the application in the deployment environment
# 1. Update the config.py file with appropriate values
# 2. Update the apache config to server via WSGI
# 3. Run the database setup scripts to setup the database

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

ABS_PATH_DS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

update_app_config () {
  CONFIG_FILE="src/config.py"
  DB_USER="root"
  DB_PASS=$(cat db_pass.txt)
  DB_NAME="outreach"
  DB_SERVER="localhost"

  # the list of white-listed IPs for POST/PUT requests to data service
  WHITELIST_IPS="['127.0.0.1']"

  # the list of allowed domains for CORS
  ALLOWED_ORIGINS="['*']"

  echo "Updating config.py.."
  # Update parts of the DB URI
  sed -i "s/<userid>/$DB_USER/" $ABS_PATH_DS/$CONFIG_FILE
  sed -i "s/<password>/$DB_PASS/" $ABS_PATH_DS/$CONFIG_FILE
  sed -i "s/<servername>/$DB_SERVER/" $ABS_PATH_DS/$CONFIG_FILE
  sed -i "s/<db_name>/$DB_NAME/" $ABS_PATH_DS/$CONFIG_FILE
  # update SQLALCHEMY_ECHO
  sed -i "s/^SQLALCHEMY_ECHO.*$/SQLALCHEMY_ECHO = False/" $ABS_PATH_DS/$CONFIG_FILE
  # update WHITELIST_IPS
  #sed -i "s/^WHITELIST_IPS.*$/WHITELIST_IPS = $WHITELIST_IPS/" $CONFIG_FILE
  # update ALLOWED_ORIGINS
  #sed -i "s/^ALLOWED_ORIGINS.*$/ALLOWED_ORIGINS = $ALLOWED_ORIGINS/" $CONFIG_FILE

  # NOTE: this is hardcoded now..somehow the log file when dynamically created
  # is owned by root. then the app fails to run.. hence the following is
  # necessary
  touch /var/www/outreach.log
  chmod a+w /var/www/outreach.log
}

update_apache_config() {
  PROC_NAME="outreach"
  WSGI_SCRIPT="outreach.wsgi"
  APACHE_VHOST_FILE="/etc/apache2/sites-available/default"

  sed -i "/<\/VirtualHost>/i \
    WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT
  " $APACHE_VHOST_FILE

  #sed -i '/<\/VirtualHost>/i \
  #  WSGIDaemonProcess $PROC_NAME user=www-data group=www-data threads=5
  #  WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT

  #  <Directory $ABS_PATH_DS>
  #    WSGIProcessGroup $PROC_NAME
  #    WSGIApplicationGroup %{GLOBAL}
  #    Order deny,allow
  #    Allow from all
  #  </Directory>
  #' $APACHE_VHOST_FILE

}

setup_db() {
  echo "Creating database: $DB_NAME"
  mysql -u $DB_USER -p$DB_PASS -Bse "create database $DB_NAME;"
  if [[ $? -ne 0 ]]; then
    echo "Failed to create database $DB_NAME"
    exit 1;
  fi

}

update_app_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update application config.py"
  exit 1;
fi
update_apache_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update apache config"
  exit 1;
fi

service apache2 restart

setup_db
exit 0;
#+END_SRC

